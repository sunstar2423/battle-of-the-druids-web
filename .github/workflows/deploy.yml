name: Deploy to AWS S3 (Legacy/Backup)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * 0'  # Weekly backup on Sunday at 6 AM UTC

env:
  AWS_REGION: ap-southeast-2
  S3_BUCKET: battle-of-the-druids-web

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Build HTML files with environment variables
      run: |
        # Set environment variables for build
        export GOOGLE_ANALYTICS_ID="${{ secrets.GOOGLE_ANALYTICS_ID }}"
        export SITE_URL="${{ secrets.SITE_URL || 'https://titanbladegames.com' }}"
        export CONTACT_EMAIL="${{ secrets.CONTACT_EMAIL || 'contact@titanbladegames.com' }}"
        
        # Run build script to inject environment variables
        node build-env.js
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Test AWS connection
      run: |
        echo "Testing AWS credentials..."
        aws sts get-caller-identity
        echo "Testing S3 access..."
        aws s3 ls s3://${{ env.S3_BUCKET }}
        
    - name: Sync Battle of the Druids to S3
      run: |
        aws s3 sync battle-of-the-druids/ s3://${{ env.S3_BUCKET }}/ \
          --delete \
          --cache-control "public, max-age=31536000" \
          --exclude "*.md" \
          --exclude ".git/*" \
          --exclude ".github/*"
          
    - name: Set specific cache headers for HTML files
      run: |
        aws s3 cp s3://${{ env.S3_BUCKET }}/index.html s3://${{ env.S3_BUCKET }}/index.html \
          --cache-control "public, max-age=300" \
          --metadata-directive REPLACE
          
    - name: Invalidate CloudFront distribution
      run: |
        if [ ! -z "${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
        fi
        
    - name: Update website status
      run: |
        echo "‚úÖ Website deployed successfully!"
        echo "üåê Live URL: http://${{ env.S3_BUCKET }}.s3-website-${{ env.AWS_REGION }}.amazonaws.com/"
        
  lighthouse:
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          http://${{ env.S3_BUCKET }}.s3-website-${{ env.AWS_REGION }}.amazonaws.com/
        configPath: ./.lighthouserc.json
        uploadArtifacts: true
        temporaryPublicStorage: true