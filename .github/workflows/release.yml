name: Release Management

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v2.1.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  AWS_REGION: ap-southeast-2
  S3_BUCKET: battle-of-the-druids-web

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up release variables
      id: vars
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          PRERELEASE="${{ github.event.inputs.prerelease }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
          PRERELEASE="false"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "prerelease=$PRERELEASE" >> $GITHUB_OUTPUT
        echo "tag_name=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- %s (%h)" --since="30 days ago")
        else
          COMMITS=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
        fi
        
        # Create release notes
        cat > release_notes.md << EOF
        ## 🎮 What's New in ${{ steps.vars.outputs.version }}
        
        ### Changes
        $COMMITS
        
        ### 🚀 Play the Games
        - [Battle of the Druids (Web)](http://battle-of-the-druids-web.s3-website-ap-southeast-2.amazonaws.com/)
        - [Download Python Version](https://github.com/sunstar2423/titanblade-games/archive/refs/tags/${{ steps.vars.outputs.version }}.zip)
        
        ### 📥 Installation
        
        **Web Version (Recommended):**
        - No installation required! Just click the link above to play instantly in your browser.
        
        **Python Version:**
        1. Download the source code zip file below
        2. Extract and install Python 3.6+
        3. Install Pygame: \`pip install pygame>=2.0.0\`
        4. Run: \`python "Battle of the Druids - Pygame Graphics Version.py"\`
        
        ### 🎯 Game Features
        - **Battle of the Druids**: Complete turn-based RPG with 4 character classes
        - **Isle of Adventure**: Point-and-click adventure with puzzle-solving
        - **Doom Riders**: Action-adventure gameplay (in development)
        
        ### 🔧 Technical Improvements
        - Enhanced CI/CD pipeline with automated testing
        - Improved security scanning and dependency management
        - Better documentation and contribution guidelines
        
        ---
        
        **Full Changelog**: [\`$LAST_TAG...${{ steps.vars.outputs.version }}\`](https://github.com/sunstar2423/titanblade-games/compare/$LAST_TAG...${{ steps.vars.outputs.version }})
        EOF
        
    - name: Create release assets
      run: |
        mkdir -p release-assets
        
        # Create web games package
        zip -r release-assets/titanblade-games-web-${{ steps.vars.outputs.version }}.zip \
          battle-of-the-druids/ isle-of-adventure/ doom-riders/ index.html \
          --exclude="*.md" "*.py" ".git/*" ".github/*"
          
        # Create Python version package  
        zip -r release-assets/battle-of-the-druids-python-${{ steps.vars.outputs.version }}.zip \
          "Battle of the Druids - Pygame Graphics Version.py" requirements.txt \
          *.png *.wav *.mp3 \
          --exclude=".git/*" ".github/*"
          
        # Create source code package
        git archive --format=zip --prefix=titanblade-games-${{ steps.vars.outputs.version }}/ \
          HEAD > release-assets/titanblade-games-source-${{ steps.vars.outputs.version }}.zip
          
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.vars.outputs.version }}
        name: Titanblade Games ${{ steps.vars.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ steps.vars.outputs.prerelease }}
        files: |
          release-assets/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update version in files
      if: github.event_name == 'workflow_dispatch'
      run: |
        # Update package.json if it exists
        if [ -f package.json ]; then
          sed -i 's/"version": ".*"/"version": "${{ steps.vars.outputs.version }}"/' package.json
        fi
        
        # Update README with latest version
        if [ -f README.md ]; then
          sed -i 's/\[v[0-9]*\.[0-9]*\.[0-9]*\]/[${{ steps.vars.outputs.version }}]/' README.md
        fi
        
    - name: Deploy release to production
      if: '!steps.vars.outputs.prerelease'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Sync release to S3
      if: '!steps.vars.outputs.prerelease'
      run: |
        aws s3 sync battle-of-the-druids/ s3://${{ env.S3_BUCKET }}/ \
          --delete \
          --cache-control "public, max-age=31536000" \
          --exclude "*.md" \
          --exclude ".git/*" \
          --exclude ".github/*"
          
    - name: Notify release completion
      run: |
        echo "🎉 Release ${{ steps.vars.outputs.version }} created successfully!"
        echo "📦 Assets uploaded to GitHub Releases"
        if [ "${{ steps.vars.outputs.prerelease }}" = "false" ]; then
          echo "🌐 Production deployment completed"
          echo "🎮 Live at: http://${{ env.S3_BUCKET }}.s3-website-${{ env.AWS_REGION }}.amazonaws.com/"
        fi
        
  update-changelog:
    runs-on: ubuntu-latest
    needs: create-release
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update CHANGELOG.md
      run: |
        VERSION="${GITHUB_REF#refs/tags/}"
        DATE=$(date +%Y-%m-%d)
        
        # Create temporary changelog entry
        cat > temp_changelog.md << EOF
        ## [$VERSION] - $DATE
        
        ### Added
        - Release $VERSION with latest features and improvements
        
        ### Changed
        - See commit history for detailed changes
        
        ### Technical
        - Automated release process improvements
        
        EOF
        
        # Insert new entry after "## [Unreleased]" line
        awk '/## \[Unreleased\]/{print; print ""; while((getline line < "temp_changelog.md") > 0) print line; close("temp_changelog.md"); next} 1' CHANGELOG.md > temp_full_changelog.md
        mv temp_full_changelog.md CHANGELOG.md
        rm -f temp_changelog.md
        
    - name: Commit changelog update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add CHANGELOG.md
        git commit -m "Update CHANGELOG.md for release ${GITHUB_REF#refs/tags/}" || exit 0
        git push